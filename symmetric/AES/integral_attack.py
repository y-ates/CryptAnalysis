#!/usr/bin/env python
#
# Copyright (C) 2017 Yakup Ates <Yakup.Ates@rub.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import random
from prettytable import PrettyTable

def rotate(word):
    return word[1:] + word[:1]

def getRconValue(num):
    Rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
            0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
            0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
            0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
            0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
            0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
            0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
            0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
            0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
            0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
            0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
            0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
            0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
            0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
            0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
            0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
            0xe8, 0xcb]
    
    return Rcon[num]

def core(word, iteration):
    word = rotate(word)
    
    for i in range(4):
        word[i] = getSBox(word[i])

    word[0] = word[0] ^ getRconValue(iteration)
    
    return word


def createRoundKey(expandedKey):
    roundKey = [0] * 16
    for i in range(4):
        for j in range(4):
            roundKey[j*4+i] = expandedKey[i*4 + j]
    return roundKey

def key_schedule(key, r):
    res = [0] * 16
    tmp = res
    
    res[0:4] = core(key[12:16], r)

    for i in range(4):
        tmp[i] = res[i] ^ key[i]

    for i in range(4, 16):
        tmp[i] = tmp[i-4] ^ key[i]

    return tmp


def addRoundKey(state, roundKey):
    round_key = [0]*16
    
    for k in range(4):
        for l in range(4):
            round_key[(k*4)+l] = roundKey[k+(l*4)]

    for i in range(16):
        state[i] ^= round_key[i]

    return state


def subBytes(state):
    for i in range(16):
        state[i] = getSBox(state[i])
            
    return state


def shiftRows(state):
    for i in range(4):
        statePtr = i*4

        for j in range(i):
            state[statePtr:statePtr+4] = state[statePtr+1:statePtr+4] \
                                         + state[statePtr:statePtr+1]

    return state


def mixColumns(state):
        for i in range(4):
            column = state[i:i+16:4]

            mult = [2, 1, 1, 3]
                
            column_tmp = list(column)

            column[0] = g_mul(column_tmp[0], mult[0]) ^ \
                        g_mul(column_tmp[3], mult[1]) ^ \
                        g_mul(column_tmp[2], mult[2]) ^ \
                        g_mul(column_tmp[1], mult[3])
            column[1] = g_mul(column_tmp[1], mult[0]) ^ \
                        g_mul(column_tmp[0], mult[1]) ^ \
                        g_mul(column_tmp[3], mult[2]) ^ \
                        g_mul(column_tmp[2], mult[3])
            column[2] = g_mul(column_tmp[2], mult[0]) ^ \
                        g_mul(column_tmp[1], mult[1]) ^ \
                        g_mul(column_tmp[0], mult[2]) ^ \
                        g_mul(column_tmp[3], mult[3])
            column[3] = g_mul(column_tmp[3], mult[0]) ^ \
                        g_mul(column_tmp[2], mult[1]) ^ \
                        g_mul(column_tmp[1], mult[2]) ^ \
                        g_mul(column_tmp[0], mult[3])

            state[i:i+16:4] = column

        return state


def g_mul(x, y):
    res = 0
    for counter in range(8):
        if y & 1:
            res ^= x

        msb_set = x & 0x80
        x <<= 1
        x &= 0xFF

        if msb_set:
            x ^= 0x1b

        y >>= 1

    return res


def getSBox(i):
    sbox =  [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
             0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
             0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
             0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
             0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
             0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
             0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
             0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
             0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
             0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
             0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
             0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
             0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
             0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
             0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
             0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
             0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
             0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
             0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
             0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
             0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
             0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
             0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
             0x54, 0xbb, 0x16]

    return sbox[i]

def getSBox_inv(i):
    sboxInv = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
               0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
               0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54,
               0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
               0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
               0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8,
               0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
               0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
               0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab,
               0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
               0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
               0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41,
               0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
               0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
               0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d,
               0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
               0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
               0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
               0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60,
               0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
               0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
               0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b,
               0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
               0x21, 0x0c, 0x7d]

    return sboxInv[i]


# 4 rounds
def enc_4R(m, key, silent=False):
    state = [0] * 16
    output = state

    for i in range(4):
        for j in range(4):
            state[(j*4)+i] = m[(i*4)+j]

    rKey = key
    state = addRoundKey(state, key)
    if not silent:
        print "Initial addRoundkey"
        unroll(state)
        for i in range(3):
            rKey = key_schedule(rKey, i+1)
            print "="*80, "\r\n"
            print "round:", i
            print "==="

            state = subBytes(state, False)
            print "subBytes", "\r\n"
            unroll(state)

            state = shiftRows(state, False)
            print "shiftRows", "\r\n"
            unroll(state)

            state = mixColumns(state, False)
            print "mixColumns", "\r\n"
            unroll(state)

            state = addRoundKey(state, rKey)
            print "addRoundkey", "\r\n"
            unroll(state)

            print "\r\n"*2, "="*80
            print "Loop done."
            print "="*80, "\r\n"*2

        rKey = key_schedule(rKey, 4)
        state = subBytes(state, False)
        print "subBytes", "\r\n"
        unroll(state)

        state = shiftRows(state, False)
        print "shiftRows", "\r\n"
        unroll(state)

        state = addRoundKey(state, rKey)
        print "addRoundkey", "\r\n"
        unroll(state)
    else:
        for i in range(3):
            rKey = key_schedule(rKey, i+1)
            state = subBytes(state, False)
            state = shiftRows(state, False)
            state = mixColumns(state, False)
            state = addRoundKey(state, rKey)

        rKey = key_schedule(rKey, 4)
        state = subBytes(state, False)
        state = shiftRows(state, False)
        state = addRoundKey(state, rKey)

    output = [0] * 16
    for k in range(4):
        for l in range(4):
            output[(k*4)+l] = state[k+(l*4)]
            
    return output


def unroll(state):
    state_table = PrettyTable(['C0', 'C1', 'C2', 'C3'])

    for k in range(4):
        #state_table.add_row([hex(state[(k*4)]), hex(state[(k*4)+1]), hex(state[(k*4)+2]), hex(state[(k*4)+3])])
        state_table.add_row([state[(k*4)], state[(k*4)+1], state[(k*4)+2], state[(k*4)+3]])

    print state_table


def main():
    #m = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34]
    #key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]

    m = [0] * 16
    key = [random.randint(0, 255) for i in range(16)]
    c = [0] * 256
    state_byte = [0] * 256

    for i in range(256):
        m[0] = i
        c[i] = enc_4R(m, key, True)
        state_byte[i] = output[i][0]

    for i in range(256): # Guessed k 
        res = 0
        
        for j in range(256): # j'th state of byte x
            res ^= getSBox_inv(state_byte[j] ^ i)

        if res == 0:
            print "key:", i
                
if __name__ == '__main__':
    main()
